CHIP		SN8P2501D
//{{SONIX_CODE_OPTION
	.Code_Option	Noise_Filter	Enable
	.Code_Option	Reset_Pin	P11
	.Code_Option	Watch_Dog	Disable
	.Code_Option	High_Clk	IHRC_RTC	;
	.Code_Option	Fcpu		#3     ; Fcpu = Fosc/8
	.Code_Option	Security	Enable
	.Code_Option	LVD		LVD_L		;
//}}SONIX_CODE_OPTION

.nolist				
	INCLUDESTD		MACRO1.H
	INCLUDESTD		MACRO2.H
	INCLUDESTD		MACRO3.H
.list
	END_RAM_ADDR	EQU	0X2F
	EER_ADD			EQU	0XA1	;10100001B
	EEW_ADD			EQU	0XA0	;10100000B
	RAM_COUNT		EQU	48
	TM_DATA_H		EQU	0X34	;ADDR OF THE TEMPEATURE	OF TM
	TM_DATA_L		EQU	0X00
	WRITE_TM_ADD_H	EQU	0X2F	;Where mcu want to wirte something into tm
	WRITE_TM_ADD_L	EQU	0X00
	TIME_GAP		EQU	0X78	;0X78
	T0_TDR			EQU	0X01
	TMR_ADD 		EQU	0X3D
	TMW_ADD			EQU	0X3C
	MAX_MEMH		EQU	0X1F
	MAX_MEML		EQU	0XF0
	LAST_TIME_EE_ADD_H EQU 0X1F
	LAST_TIME_EE_ADD_L EQU 0XFE
	LIVE_TIME_ADD_H		EQU	0X1F
	LIVE_TIME_ADD_L		EQU	0XFC
	DEFAULT_FRONT_TIME_DELAY	EQU	0X01
	DEFAULT_TIME_GAP	EQU	0X01
	TM_INITIAL_TIME_ADD_H	EQU 0X30
	TM_INITIAL_TIME_ADD_L	EQU 0X00
	TM_TIME_H		EQU	0X31
	TM_TIME_L		EQU	0X00
	EE_DELAY_ADD_H	EQU	0X1F
	EE_GAP_ADD_L	EQU	0XF8
	EE_INITIAL_TIME_ADD_H	EQU	0X1F
	EE_INITIAL_TIME_ADD_L	EQU	0XFA
	WRITE_FLAG_H	EQU 0X01
	WRITE_FLAG_L	EQU	0X00
	DEFAULT_GAP_TIME_FLAGH EQU 0X02
	DEFAULT_GAP_TIME_FLAGL EQU	0X00
.DATA
			ORG	0H
	DELAYTIME1	DS	1
	DELAYTIME2	DS	1
	TIMEOUT		DS	1
	TLC0		DS	1
	TLC1		DS	1
	TLC2		DS	1
	FLAG1		DS	1
	FLAG2		DS	1
	TIMEH		DS	1
	TIMEG		DS	1
	DATA_IN		DS	1
	DATA_OUT	DS	1
	DATAH		DS	1
	DATAL		DS	1
	ADDRESSH	DS	1
	ADDRESSL	DS	1
	CRCT1		DS	1
	CRCT2		DS	1
	COUNT		DS	1
	MAC_H		DS	1
	MAC_L		DS	1
	FRONT_DELAY	DS	1
	TIME_DELAY_GAP	DS	1
	STARTADDRH		DS	1
	STARTADDRL		DS	1
	INITIAL_TIMEH	DS	1
	INITIAL_TIMEL	DS	1
;**************BIT_VARIABLES_DEFINNITIONS*******
	READTM_FLAG	EQU	FLAG1.0
	TIME_FLAG	EQU	FLAG1.3
	RESET_FLAG	EQU	FLAG1.1
	TM_EE_FLAG	EQU FLAG1.2
	DEFAULT_GAP_FLAG	EQU	FLAG1.4
	FILLOUT_FLAG	EQU	FLAG1.5
	I2CERROR_FLAG	EQU	FLAG1.6
	ASK_FLAG	EQU	FLAG1.7
	READ_LED_FLAG	EQU	FLAG2.1
	NOT_UPLOAD_FLAG	EQU	FLAG2.2
	HAVE_UPLOAD_FLAG EQU FLAG2.3
	NOT_QUICK_MODE_FLAG EQU FLAG2.4
	TM_I2C_EEROR	EQU FLAG2.5
	BLE_FLAG		EQU FLAG2.6
	CLED_IO			EQU	P2.2
	SDATA_IO		EQU	P2.1
	SCL_IO			EQU	P2.0
	S_TM_EE_IO		EQU	P2.3
	IC_IDLE	EQU	P2.4
	SDA_IO			EQU	P2.5
	VTM_IO			EQU	P5.4
	VSR_IO			EQU	P0.0
	CLED_CONT		EQU	P2M.2
	SDATA_CONT		EQU	P2M.1
	SCL_CONT		EQU	P2M.0
	S_TM_EE_CONT	EQU	P2M.3
	SDA_CONT		EQU	P2M.5
	VTM_CONT		EQU	P5M.4
	VSR_CONT		EQU	P0M.0
;***************************************
	VDDF			EQU	P1.1
	S_VDD_VCC_IO		EQU	P1.0
	S_VDD_VCC_CONT		EQU	P1M.0
;*************CODE_SECTION**********************	
.CODE

		ORG	0
	JMP		START
		ORG	8H
	JMP		INT_SERVICE
INT_SERVICE:
;KEEP ACC AND PFLAG
	PUSH
;T0 INTERRUPT
JUST_T0:
	B0BTS0	FT0IEN
	B0BTS1	FT0IRQ
	JMP		JUST_TC0
	B0BCLR	FT0IRQ
;T0 INTERRUPT SERVISE PROGRESS
	B0BTS0	VDDF
	BSET 	NOT_UPLOAD_FLAG
	B0BTS0	VDDF
	BCLR    HAVE_UPLOAD_FLAG
;///////////////////////////////
	BTS1	HAVE_UPLOAD_FLAG
	JMP		$+3
	B0BTS1	VDDF
	BSET	NOT_QUICK_MODE_FLAG
	B0BTS1	VDDF
	BSET    HAVE_UPLOAD_FLAG
;//////////////////////////////////
	INCMS	TIMEH ;TIMEH=TIMEH+1,
	MOV		A,#TIME_GAP
	CMPRS	A,TIMEH
	JMP		EXIT_INT
	CLR		TIMEH
	BSET	TIME_FLAG
	INCMS	TIMEG
	MOV		A,TIME_DELAY_GAP
	CMPRS	A,TIMEG
	JMP		EXIT_INT
	CLR		TIMEG
	BSET	READTM_FLAG
	JMP		EXIT_INT
JUST_TC0:
	B0BTS0	FTC0IEN
	B0BTS1	FTC0IRQ
	JMP		JUST_INT0
	B0BCLR	FTC0IRQ
;TC0 INTERRUPT SERVICE PROGRESS
	JMP		EXIT_INT
JUST_INT0:
	B0BTS0	FP00IEN
	B0BTS1	FP00IRQ
	JMP EXIT_INT
	B0BCLR	FP00IRQ
;INT0 INTERRUPT SERVISE PROGRESS
EXIT_INT:
	POP
	RETI
;*********************************************************
;***********************STARRT**********************
START:
	MOV		A,#07FH
	B0MOV		STKP,A		;DISABLE GLOBAL INTERRUPT
	CLR		PFLAG
	MOV		A,#00H
	B0MOV		OSCM,A
	MOV		A,#0X5A
	B0MOV		WDTR,A	
	CALL		CLRRAM
STATE_INITIAL:
	CALL		SYS_INIT_FUN
	B0BCLR		FGIE
GET_TIME_INITIAL:
;******************************************
	MOV		A,#DEFAULT_FRONT_TIME_DELAY
	MOV		FRONT_DELAY,A
	MOV		A,#DEFAULT_TIME_GAP
	MOV		TIME_DELAY_GAP,A
	B0BSET	S_TM_EE_IO
	B0BCLR	IC_IDLE
;Get initial time from tm
	MOV		A,#TM_INITIAL_TIME_ADD_H
	MOV		MAC_H,A
	MOV		A,#TM_INITIAL_TIME_ADD_L
	MOV		MAC_L,A
	CALL	GET_DATA_FROM_TM_FUN
	MOV		A,DATAH
	CMPRS	A,#0X00
	MOV		INITIAL_TIMEH,A
	MOV		A,DATAL
	CMPRS	A,#0X00
	MOV		INITIAL_TIMEL,A
	CALL	DELAY_SHORT
;GET TIME DELAY AND GAP FROM TM
	MOV		A,#TM_TIME_H
	MOV		MAC_H,A
	MOV		A,#TM_TIME_L
	MOV		MAC_L,A
	CALL	GET_DATA_FROM_TM_FUN
;the 2bit in front of DATAH is useness
	MOV		A,#0X3F
	AND		DATAH,A
	MOV			A,DATAH
	CMPRS		A,#0X00
	MOV			FRONT_DELAY,A
	MOV			A,DATAL
	CMPRS		A,#0X00
	MOV			TIME_DELAY_GAP,A		
	B0BCLR		S_TM_EE_IO
	CALL		DELAY_LONG
;*******************************************
GET_INITIAL_DATA_FROM_EE:
;*******************************************
	MOV			A,#LAST_TIME_EE_ADD_H
	MOV			MAC_H,A
	MOV			A,#LAST_TIME_EE_ADD_L
	MOV			MAC_L,A
	BTS0		RESET_FLAG
	JMP			RESET_EEPROM
	CALL		GET_DATA_FROM_EE_FUN
	MOV			A,ADDRESSL
	MOV			STARTADDRL,A
	MOV			A,ADDRESSH
	MOV			STARTADDRH,A
	MOV			A,ADDRESSH
	CMPRS		A,#0XFF
	JMP			$+3
	CLR			STARTADDRH
	CLR			STARTADDRL
	CALL		DELAY_LONG
	MOV			A,#LIVE_TIME_ADD_H
	MOV			MAC_H,A
	MOV			A,#LIVE_TIME_ADD_L
	MOV			MAC_L,A
	CALL		GET_DATA_FROM_EE_FUN
;;;;;;;;;;;;;;LAST READ TM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	B0BSET		S_TM_EE_IO
	B0BCLR		VSR_IO
	MOV			A,#TM_DATA_H
	MOV			MAC_H,A
	MOV			A,#TM_DATA_L
	MOV			MAC_L,A
	CALL		GET_DATA_FROM_TM_FUN
	B0BCLR		VTM_IO
	CALL		DELAY_SHORT
	B0BCLR		S_TM_EE_IO
	B0BCLR		VTM_CONT
;/////////////////WRITE TO EE//////////////////////////////
WRITE_INITIAL_DATA_TO_EE:
;///////////INITIAL TIME/////////////////////
	CALL		DELAY_SHORT
	MOV		A,#EE_INITIAL_TIME_ADD_H
	MOV		MAC_H,A
	MOV		A,#EE_INITIAL_TIME_ADD_L
	MOV		MAC_L,A
	MOV		A,INITIAL_TIMEH
	MOV		DATAH,A
	MOV		A,INITIAL_TIMEL
	MOV		DATAL,A
	CALL		DATA_TO_EEPROM_FUN
	CALL	DELAY_LONG
	MOV		A,#EE_DELAY_ADD_H
	MOV		MAC_H,A
	MOV		A,#EE_GAP_ADD_L
	MOV		MAC_L,A
	MOV		A,FRONT_DELAY
	MOV		DATAH,A
	MOV		A,TIME_DELAY_GAP
	MOV		DATAL,A
	CALL		DATA_TO_EEPROM_FUN
	CALL	DELAY_LONG
SET_WRITE_EE_START_ADD:
	MOV			A,STARTADDRH
	MOV			ADDRESSH,A
	MOV			A,STARTADDRL
	MOV			ADDRESSL,A
	
	BTS1		RESET_FLAG
	JMP			FRONT_DELAY_MODE
RESET_EEPROM:
	BCLR	IC_IDLE
	MOV		A,#0XFF
	MOV		DATAH,A
	MOV		A,#0XFF
	MOV		DATAL,A
	MOV		A,#0X00
	MOV		MAC_H,A
RESET_EE_LOOP_H:
	MOV		A,#0X00
	MOV		MAC_L,A
RESET_EE_LOOP_L:
	CALL		DATA_TO_EEPROM_FUN
	INCMS	MAC_L
	JMP		RESET_EE_LOOP_L
	INCMS	MAC_H
	MOV		A,MAC_H
	CMPRS	A,#0X20
	JMP		RESET_EE_LOOP_H
	CLR		ADDRESSL
	CLR		ADDRESSH
	MOV		A,#LAST_TIME_EE_ADD_H
	MOV		MAC_H,A
	MOV		A,#LAST_TIME_EE_ADD_L
	MOV		MAC_L,A
	MOV		A,ADDRESSH
	MOV		DATAH,A
	MOV		A,ADDRESSL
	MOV		DATAL,A
	CALL		DATA_TO_EEPROM_FUN
	MOV			A,#LIVE_TIME_ADD_H
	MOV			MAC_H,A
	MOV			A,#LIVE_TIME_ADD_L
	MOV			MAC_L,A
	CALL		DATA_TO_EEPROM_FUN
	BCLR		RESET_FLAG
;******************************************
FRONT_DELAY_MODE:
	B0BSET		FGIE
	CALL		SET_LOW_POWER_FUN
;DELAY WAIT_FOR_SEAVAL_MINITE_FUN
;/////////////////////////////////////////	
	MOV   	A,FRONT_DELAY
	MOV		CRCT1,A
FRONT_DELAY_LOOP:
	GreenMode
	BTS0	NOT_QUICK_MODE_FLAG
	CALL	SET_EE_TM_FUN
	BTS0	NOT_UPLOAD_FLAG
	CALL	SET_LOW_POWER_FUN
	BTS1	TIME_FLAG
	JMP		FRONT_DELAY_LOOP
	BCLR	TIME_FLAG
	DECMS	CRCT1
	JMP		FRONT_DELAY_LOOP
	;///////////////////////////
	BCLR		NOT_UPLOAD_FLAG
	BCLR		HAVE_UPLOAD_FLAG
;//////////////////////////////////////
MAIN:
	;close tc0 interrupt until the recording finished 
	GreenMode
	
JUST_I2CSLAVE_MODE:
	BTS1	READTM_FLAG
	JMP		JUST_UPLOAD_MODE
	BTS0	FILLOUT_FLAG
	JMP		MEM_FILLOUT_MODE
	B0BTS1	FT0IEN
	JMP		JUST_UPLOAD_MODE
;*****START TM I2C SLAVE MODE***********
I2CSLAVE_MODE:
	BCLR 	READTM_FLAG
	BTS1	VDDF
	JMP		ADDRESS_CHANGE
	B0BCLR 	FGIE
	B0BCLR		IC_IDLE
	B0BSET	VTM_CONT
	B0BSET	S_TM_EE_IO
	B0BCLR	VSR_IO
	MOV		A,#TM_DATA_H
	MOV		MAC_H,A
	MOV		A,#TM_DATA_L
	MOV		MAC_L,A
	CALL	GET_DATA_FROM_TM_FUN
	B0BCLR		VTM_IO
	CALL		DELAY_SHORT
	B0BCLR		S_TM_EE_IO
	B0BCLR		VTM_CONT
	CALL		DELAY_SHORT
	MOV		A,ADDRESSH
	MOV		MAC_H,A
	MOV		A,ADDRESSL
	MOV		MAC_L,A
	CALL		DATA_TO_EEPROM_FUN
	MOV		A,#LAST_TIME_EE_ADD_H
	MOV		MAC_H,A
	MOV		A,#LAST_TIME_EE_ADD_L
	MOV		MAC_L,A
	MOV		A,ADDRESSH
	MOV		DATAH,A
	MOV		A,ADDRESSL
	MOV		DATAL,A
	CALL		DATA_TO_EEPROM_FUN
	B0BTS0		FT0IRQ
	INCMS		TIMEH
	B0BCLR		FT0IRQ
	B0BSET		FGIE
	MOV			A,#TIME_GAP
	CMPRS		A,TIMEH
	JMP			ADDRESS_CHANGE
	CLR			TIMEH
	BSET		TIME_FLAG
	INCMS		TIMEG
	MOV			A,TIME_DELAY_GAP
	CMPRS		A,TIMEG
	JMP			ADDRESS_CHANGE
	CLR			TIMEG
	BSET		READTM_FLAG
ADDRESS_CHANGE:
	B0BSET		IC_IDLE
	MOV			A,#0X02
	ADD			ADDRESSL,A
	MOV			A,#0X00
	ADC			ADDRESSH,A
	MOV			A,#MAX_MEMH
	CMPRS		A,ADDRESSH
	JMP			JUST_I2CSLAVE_MODE
	MOV			A,#MAX_MEML
	CMPRS		A,ADDRESSL
	JMP			JUST_I2CSLAVE_MODE
	BSET		FILLOUT_FLAG
	B0BCLR		FT0ENB
	B0BCLR		FT0IEN
	JMP			MEM_FILLOUT_MODE
;*****************************************
JUST_UPLOAD_MODE:
	B0BCLR		CLED_CONT
	CALL		DELAY_SHORT
	CALL		DELAY_SHORT
	B0BTS1		CLED_IO
	JMP			RESET_MODE
	BTS0		TM_EE_FLAG
	JMP			END_TM_EE_MODE
	BTS0		VDDF
	JMP			MEM_FILLOUT_MODE
TM_EE_MODE:
	BCLR		HAVE_UPLOAD_FLAG
	BTS0		TM_EE_FLAG
	JMP			END_TM_EE_MODE
	CALL		SET_EE_TM_FUN
END_TM_EE_MODE:
	;BTS0		FILLOUT_FLAG
	;JMP			MEM_FILLOUT_MODE	
	BTS1		VDDF
	JMP			MEM_FILLOUT_MODE
	CALL		SET_LOW_POWER_FUN
	BTS0		FILLOUT_FLAG
	JMP			MEM_FILLOUT_MODE
	;we should keep rtc function 
	JMP		ON_LED_MODE
;*************************************
MEM_FILLOUT_MODE:
	BTS1	FILLOUT_FLAG
	JMP		ON_LED_MODE
	B0BTS1	VDDF
	JMP		$+4
	BTS0	TM_EE_FLAG
	CALL	SET_LOW_POWER_FUN
	JMP		$+3
	BTS1	TM_EE_FLAG
	CALL	SET_EE_TM_FUN
	B0BTS1		FT0ENB
	JMP			$+5
	CLR			T0C
	B0BCLR		FT0IRQ
	B0BCLR		FT0IEN
	B0BCLR		FT0ENB
	SleepMode
END_FILLOUT_MODE:
	B0BSET		CLED_CONT
	B0BSET		CLED_IO
	CALL		DELAY_MINI
	JMP		JUST_UPLOAD_MODE
ON_LED_MODE:
	B0BSET	CLED_CONT
	B0BSET	CLED_IO
	BTS0	READ_LED_FLAG
	CALL	READ_LED_FUN
	BCLR   	READ_LED_FLAG
	B0BSET	CLED_IO
	BTS0	FILLOUT_FLAG
	JMP		JUST_UPLOAD_MODE
	JMP		MAIN
RESET_MODE:
	BSET	RESET_FLAG
	BCLR	FILLOUT_FLAG
	CLR		TIMEH
	CLR		TIMEG
	JMP		STATE_INITIAL
	
;******************************************************************************	
READ_LED_FUN:
   	MOV  	   	A,#1
   	MOV  	   	TLC2,A
LED_MODEL1:	
   	B0BSET   	CLED_IO
   	CALL   	   	DELAY_LED
   	B0BCLR   	CLED_IO
   	CALL   	   	DELAY_LED
   	DECMS   	TLC2
   	JMP   	   	LED_MODEL1
   	RET
;*******************************************************
;***************************************
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
CLRRAM:
	
	CLR			Y
	MOV			A,#END_RAM_ADDR
	B0MOV		Z,A
CLRRAM10:
	CLR			@YZ
	DECMS		Z
	JMP			CLRRAM10
	CLR			@YZ
	RET
;***********************************
;***************************************
;*************WRITE TMEPERATURE INTO EEPROM*************
;*************RECORDING ADDRESS THE LAST TIME STORAGE THE TMPERATURE VALUE************
;**************************************
DATA_TO_EEPROM_FUN:
	B0BSET		SDA_CONT
	B0BSET		SDA_IO
	B0BSET		SCL_CONT
	B0BSET		SCL_IO
	MOV			A,MAC_L
	MOV			CRCT2,A
	MOV			A,DATAH
	MOV			CRCT1,A
	MOV			A,#0X02
	MOV			TLC2,A
MOVE_DATA_TO_EEPROM:
	CALL		I2C_START_EE
	MOV			A,#EEW_ADD
	MOV			DATA_IN,A
	CALL		EEADDRESS_ASK
	MOV			A,MAC_H
	MOV			DATA_IN,A
	CALL		EEADDRESS_ASK
	MOV			A,CRCT2
	MOV			DATA_IN,A
	CALL		EEADDRESS_ASK
	CALL		DELAY_MINI
	MOV			A,CRCT1
	MOV			DATA_IN,A
	CALL		EEADDRESS_ASK
	CALL		I2C_END_EE
	
	CALL		DELAY_LONG
	MOV			A,#0X01
	ADD			CRCT2,A
	MOV			A,DATAL
	MOV			CRCT1,A
	DECMS		TLC2
	JMP			MOVE_DATA_TO_EEPROM
;*********************************************
	B0BCLR		SCL_CONT
	RET
;**************************************
PUT_DATA_INTO_TM_FUN:
	B0BSET	SCL_CONT
	B0BSET	SDATA_CONT
	B0BCLR	SDATA_IO
	B0BCLR	SCL_IO
	CALL 	DELAY_LONG
	CALL 	DELAY_LONG
	B0BSET 	VTM_IO
	CALL 	DELAY_LONG
	;CALL	DELAY_LONG
START_TMI2C_S:
	MOV 	A,#0X04
	MOV 	TLC0,A
LOOP_1_S:
	B0BSET 	SCL_IO
	CALL	DELAY_MINI;13US
	CALL	CALL_DELAY
	B0BCLR 	SCL_IO
	CALL 	DELAY_MINI
	DECMS  	TLC0
	JMP 	LOOP_1_S
	BCLR 	SDATA_IO
	CALL	DELAY_LONG
	CALL	DELAY_LONG
	MOV 	A,#4
	B0MOV 	TLC0,A
LOOP_2_S:
	B0BCLR 	SCL_IO
	CALL	DELAY_MINI
	CALL	CALL_DELAY
	B0BSET 	SCL_IO
	CALL	DELAY_MINI
	DECMS 	TLC0
	JMP 	LOOP_2_S
	CALL	DELAY_SHORT
	MOV 	A,#20
	B0MOV 	TLC0,A
	BSET 	SDATA_IO
WAIT_TM_INIT_S:
	CALL 		DELAY_LONG
	DECMS 		TLC0
	JMP 		WAIT_TM_INIT_S
;**************START*****************************
	CALL		I2C_START_TM
;***********************************************
	MOV 		A,#TMW_ADD
	MOV 		DATA_IN,A
	CALL 		TMADDRESS_ASK
	BTS0		TM_I2C_EEROR
	JMP			END_TM_S
	MOV 		A,#WRITE_TM_ADD_H
	MOV 		DATA_IN,A
	CALL 		TMADDRESS_ASK
	MOV 		A,#WRITE_TM_ADD_L
	MOV 		DATA_IN,A
	CALL 		TMADDRESS_ASK
	CALL		DELAY_LONG
	MOV 		A,DATAH
	MOV 		DATA_IN,A
	CALL 		TMADDRESS_ASK
	MOV 		A,DATAL
	MOV 		DATA_IN,A
	CALL 		TMADDRESS_ASK
	CALL		DELAY_SHORT
;**************END*******************************
	CALL		I2C_END_TM
	CALL		DELAY_SHORT
	B0BCLR		SDATA_IO
END_TM_S:
	BCLR		TM_I2C_EEROR
	B0BCLR 		VTM_IO
	B0BCLR		SDATA_CONT
	B0BCLR		SCL_CONT
	CALL 		DELAY_SHORT
	RET
;*******************************************
;*****************************************
GET_DATA_FROM_TM_FUN:
	MOV		A,#0X0F
	MOV		COUNT,A
TM_I2C_WORK_LOOP:
	B0BSET	SCL_CONT
	B0BSET	SDATA_CONT
	B0BCLR	SDATA_IO
	B0BCLR	SCL_IO
	CALL 	DELAY_LONG
	CALL 	DELAY_LONG
	B0BSET 	VTM_IO
	CALL 	DELAY_LONG
	;CALL	DELAY_LONG
START_TMI2C:
	MOV 	A,#0X04
	MOV 	TLC0,A
LOOP_1:
	B0BSET 	SCL_IO
	CALL	DELAY_MINI;13US
	CALL	CALL_DELAY
	B0BCLR 	SCL_IO
	CALL 	DELAY_MINI
	DECMS  	TLC0
	JMP 	LOOP_1
	MOV 	A,#40
	B0MOV 	TLC0,A
	BCLR 	SDATA_IO
	CALL	DELAY_LONG
	;CALL	DELAY_SHORT
	MOV 	A,#4
	B0MOV 	TLC0,A
LOOP_2:
	B0BCLR 	SCL_IO
	CALL	DELAY_MINI
	CALL	CALL_DELAY
	B0BSET 	SCL_IO
	CALL	DELAY_MINI
	DECMS 	TLC0
	JMP 	LOOP_2
	CALL	DELAY_SHORT
	MOV 	A,#5
	B0MOV 	TLC0,A
	BSET 	SDATA_IO
WAIT_TM_INIT:
	CALL 		DELAY_LONG
	DECMS 		TLC0
	JMP 		WAIT_TM_INIT
;**************START*****************************
	CALL		I2C_START_TM
;***********************************************
	MOV 		A,#TMR_ADD
	MOV 		DATA_IN,A
	CALL 		TMADDRESS_ASK
	BTS0		TM_I2C_EEROR
	JMP			END_TM
	MOV 		A,MAC_H
	MOV 		DATA_IN,A
	CALL 		TMADDRESS_ASK
	MOV 		A,MAC_L
	MOV 		DATA_IN,A
	CALL 		TMADDRESS_ASK
	B0BCLR		SDATA_CONT
	CALL 		DELAY_LONG
	BCLR 		ASK_FLAG
	CALL 		TMDATA_ASK
	MOV 		A,DATA_OUT
	MOV 		DATAH,A
	BSET 		ASK_FLAG
	CALL 		TMDATA_ASK
	MOV 		A,DATA_OUT
	MOV 		DATAL,A		
;**************END*******************************
	CALL		I2C_END_TM
	CALL		DELAY_SHORT
	B0BCLR		SDATA_IO
	DECMS		COUNT
	JMP			$+2
	JMP			END_TM
	B0BCLR 		VTM_IO
	MOV			A,#0X00
	CMPRS		A,DATAH
	JMP			$+4
	CMPRS		A,DATAL
	JMP			$+2
	JMP			TM_I2C_WORK_LOOP
	BSET		READ_LED_FLAG
END_TM:
	BCLR		TM_I2C_EEROR
	B0BCLR 		VTM_IO
	B0BCLR		SDATA_CONT
	B0BCLR		SCL_CONT
	CALL 		DELAY_SHORT
	RET
;*******************************************
;***********************************************************
;*********************************************************
GET_DATA_FROM_EE_FUN:
	B0BSET		SCL_CONT
	B0BSET		SDA_CONT
	B0BSET		SDA_IO
	B0BSET		SCL_IO
	CALL		DELAY_SHORT
	CALL		I2C_START_EE
	MOV			A,#EEW_ADD
	MOV			DATA_IN,A
	CALL		EEADDRESS_ASK
	MOV			A,MAC_H
	MOV			DATA_IN,A
	CALL		EEADDRESS_ASK
	MOV			A,MAC_L
	MOV			DATA_IN,A
	CALL		EEADDRESS_ASK
	B0BSET		SDA_IO
	CALL		DELAY_SHORT
	B0BSET		SCL_IO
	CALL		DELAY_SHORT
	CALL		I2C_START_EE
	CALL		DELAY_SHORT
	MOV			A,#EER_ADD
	MOV			DATA_IN,A
	CALL		EEADDRESS_ASK
	B0BCLR		SDA_CONT
	BCLR		ASK_FLAG
	CALL		EEDATA_ASK
	MOV			A,DATA_OUT
	MOV			ADDRESSH,A
	B0BCLR		SDA_CONT
	CALL		DELAY_MINI
	BSET		ASK_FLAG
	CALL		EEDATA_ASK
	MOV			A,DATA_OUT
	MOV			ADDRESSL,A
	CALL		I2C_END_EE
;*************************************
	CALL		DELAY_SHORT
	B0BCLR		SCL_CONT
	RET
;************************************************
I2C_EEROR:
	;open interrupt
	;SleepMode
	BCLR	I2CERROR_FLAG
	BTS0	VTM_IO
	BSET	TM_I2C_EEROR
	RET
I2C_START_EE:
	CALL		DELAY_MINI
	B0BCLR 		SDA_IO
	CALL 		DELAY_MINI
	B0BCLR 		SCL_IO
	CALL 		DELAY_MINI
	RET
I2C_END_EE:
	B0BCLR 		SDA_IO
	CALL 		DELAY_MINI
	B0BSET 		SCL_IO
	CALL 		DELAY_MINI
	B0BSET 		SDA_IO
	CALL		DELAY_MINI
	RET
I2C_START_TM:
	CALL		DELAY_MINI
	B0BCLR 		SDATA_IO
	CALL 		DELAY_MINI
	B0BCLR 		SCL_IO
	CALL 		DELAY_MINI
	RET
I2C_END_TM:
	B0BCLR 		SDATA_IO
	CALL 		DELAY_MINI
	B0BCLR		SCL_IO
	CALL		DELAY_MINI
	B0BSET 		SDATA_IO
	CALL		DELAY_MINI
	B0BSET 		SCL_IO
	RET
TMADDRESS_ASK:
	MOV 		A,#8
	MOV 		TIMEOUT,A
TMADDRESS_LOOP:
	BTS0		DATA_IN.7
	JMP 		MD_1
	B0BTS0 		SDATA_IO
	B0BCLR		SDATA_IO
	JMP 		NEXT_1
MD_1:
	B0BTS1 		SDATA_IO
	B0BSET		SDATA_IO
NEXT_1:
	CALL		DELAY_MINI
	B0BSET 		SCL_IO
	CALL		DELAY_MINI
	RLCM 		DATA_IN
	B0BCLR 		SCL_IO
	DECMS 		TIMEOUT
	JMP 		TMADDRESS_LOOP
	
	B0BCLR 		SDATA_CONT
	CALL		DELAY_MINI
	B0BSET 		SCL_IO
	CALL 		CALL_DELAY
	B0BTS0 		SDATA_IO
	CALL		I2C_EEROR
	CALL		DELAY_MINI
	BCLR 		SCL_IO
	BSET 		SDATA_CONT
	RET
;**********************TM_READING_DATA********************************
TMDATA_ASK:
	B0BCLR 		SDATA_CONT
	MOV 		A,#8
	MOV 		TIMEOUT,A
TMDATA_LOOP:
	MOV 		A,#9
	MOV 		TLC0,A
	CALL		DELAY_MINI
	BSET 		SCL_IO
	CALL 		CALL_DELAY
	B0BTS0 		SDATA_IO
	BSET 		DATA_OUT.0
	B0BTS1 		SDATA_IO
	BCLR 		DATA_OUT.0
	RLCM 		DATA_OUT
	CALL		DELAY_MINI
	B0BCLR 		SCL_IO
	DECMS 		TIMEOUT
	JMP 		TMDATA_LOOP
	B0BSET 		SDATA_CONT
	BTS0 		ASK_FLAG
	B0BSET 		SDATA_IO
	BTS1 		ASK_FLAG
	B0BCLR 		SDATA_IO
	RRCM 		DATA_OUT
	CALL		DELAY_MINI
	BSET 		SCL_IO
	CALL		DELAY_MINI
	BCLR		SCL_IO	
	RET
;******************************************************
EEADDRESS_ASK:
	MOV 		A,#8
	MOV 		TIMEOUT,A
EEADDRESS_LOOP:
	BTS0		DATA_IN.7
	JMP 		EEMD_1
	B0BTS0 		SDA_IO
	B0BCLR		SDA_IO
	JMP 		EENEXT_1
EEMD_1:
	B0BTS1 		SDA_IO
	B0BSET		SDA_IO
EENEXT_1:
	CALL		DELAY_MINI
	B0BSET 		SCL_IO
	CALL		DELAY_MINI
	RLCM 		DATA_IN
	B0BCLR 		SCL_IO
	DECMS 		TIMEOUT
	JMP 		EEADDRESS_LOOP
	
	B0BCLR 		SDA_CONT
	CALL		DELAY_MINI
	B0BSET 		SCL_IO
	CALL 		CALL_DELAY
	B0BTS0 		SDA_IO
	CALL		I2C_EEROR
	CALL		DELAY_MINI
	BCLR 		SCL_IO
	BSET 		SDA_CONT
	RET
;****************************************
EEDATA_ASK:
	B0BCLR 		SDA_CONT
	MOV 		A,#8
	MOV 		TIMEOUT,A
EEDATA_LOOP:
	MOV 		A,#9
	MOV 		TLC0,A
	CALL		DELAY_MINI
	BSET 		SCL_IO
	CALL 		CALL_DELAY
	B0BTS0 		SDA_IO
	BSET 		DATA_OUT.0
	B0BTS1 		SDA_IO
	BCLR 		DATA_OUT.0
	RLCM 		DATA_OUT
	CALL		DELAY_MINI
	B0BCLR 		SCL_IO
	DECMS 		TIMEOUT
	JMP 		EEDATA_LOOP
	
	B0BSET 		SDA_CONT
	BTS0 		ASK_FLAG
	B0BSET 		SDA_IO
	BTS1 		ASK_FLAG
	B0BCLR 		SDA_IO
	RRCM 		DATA_OUT
	CALL		DELAY_MINI
	BSET 		SCL_IO
	CALL		DELAY_MINI
	BCLR		SCL_IO	
	RET
;*********************delay*****************
CALL_DELAY:
	RET
DELAY_MINI:;13US
	MOV		A,#0X05
	MOV		DELAYTIME1,A
DELAY0:
	DECMS	DELAYTIME1
	JMP		DELAY0
	RET
	
DELAY_SHORT:		;50US FOR 0.5US/INSTRUCTION
	MOV		A,#0X63
	MOV		DELAYTIME1,A
DELAY1:
	NOP
	DECMS	DELAYTIME1
	JMP		DELAY1
	RET
DELAY_LONG:	;>=5MS
;WAIT_FOR_A_LONG_WHILE
	MOV		A,#0X0A
	B0MOV	DELAYTIME1,A
DELAY2_1:
	MOV		A,#0XC7
	MOV		DELAYTIME2,A
DELAY2_2:
	NOP
	DECMS	DELAYTIME2
	JMP		DELAY2_2	
	DECMS	DELAYTIME1
	JMP		DELAY2_1
	RET		
DELAY_LED:		;0.2S
;WAIT_FOR_DEEP_DARK_FANTASY
	MOV		A,#0XFF
	MOV		DELAYTIME2,A
DELAY3_1:
	MOV		A,#0XFF
	MOV		DELAYTIME1,A
DELAY3_2:
	NOP
	NOP
	DECMS		DELAYTIME1
	JMP			DELAY3_2
	DECMS		DELAYTIME2
	JMP			DELAY3_1
	RET
OPEN_TC0_INT_FUN:
	B0BSET	FTC0CKS	;	OUTSIDE INPUT ACCIDENT
	B0BSET	FALOAD0 ;
	MOV		A,#0XFD
	B0MOV	TC0R,A
	B0MOV	TC0C,A
	B0BCLR	FTC0IRQ
	B0BSET	FTC0IEN
	B0BSET	FTC0ENB
	RET
SYS_INIT_FUN:
	MOV			A,#0X3D
	B0MOV		P2M,A
	MOV			A,#0X35
	B0MOV		P2,A
	;up resistor for p2.1
	;MOV			A,#0X02
	;B0MOV		P2UR,A
	MOV			A,#0X01
	B0MOV		P1M,A
	CLR			P1
	B0BSET		VSR_CONT
	B0BCLR		VSR_IO
	B0BSET		S_VDD_VCC_CONT
	B0BCLR		S_VDD_VCC_IO
	B0BSET		VTM_CONT
	B0BCLR		VTM_IO
	MOV			A,#0X03
	MOV			CRCT1,A
SYS_INIT_LED:
	B0BCLR		CLED_IO
	CALL		DELAY_LED	
	B0BSET		CLED_IO
	CALL		DELAY_LED
	DECMS		CRCT1
	JMP			SYS_INIT_LED
;************T0_INIT_START************************************
	MOV			A,#0X00
	B0MOV		T0M,A	
	B0BSET		FT0TB	; T0 = Fcpu/256,PERIOD TIME IS 2S
	CLR			T0C
	B0BCLR		FT0IRQ
	B0BSET		FT0IEN
	B0BSET		FT0ENB
;*****************TC0_INIT_START*****************
	CLR			TC0M
	CLR			TC0C
	B0BCLR		FTC0IRQ
	B0BCLR		FTC0IEN
	B0BCLR		FTC0ENB
;************************OPEN P1.1WEEK UP FUNCTION*********************
	MOV			A,#0X02
	B0MOV		P1W,A
	CALL		DELAY_MINI
	RET
;//////////////////////////////////////////////////
SET_EE_TM_FUN:
	B0BCLR		SDA_CONT
	B0BCLR		VTM_CONT
	B0BCLR		SCL_CONT
	B0BCLR		SDATA_CONT
	B0BSET		VSR_IO
	B0BSET		S_TM_EE_IO
	BSET		TM_EE_FLAG
	B0BCLR	IC_IDLE
	BCLR	NOT_QUICK_MODE_FLAG
	RET
;////////////////////////////////////////
;////////////SET LOW POWER
SET_LOW_POWER_FUN:
;****************************************
	B0BCLR		VTM_CONT
	B0BCLR		S_TM_EE_IO
	B0BCLR		VSR_IO
	BCLR		TM_EE_FLAG
	B0BSET	IC_IDLE
	RET
;/////////////////////////////////////////	
;*******************************************
	ENDP
